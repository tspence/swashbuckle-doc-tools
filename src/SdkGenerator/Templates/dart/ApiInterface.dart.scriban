import 'dart:async';
import 'dart:io';

import 'package:http/io_client.dart';

import '../client/AuthService.dart';
import '../flavours/BuildConfig.dart';

{{~ for cat in api.categories ~}}
import './clients/{{ cat | camel_case_to_snake_case }}_client.dart';
{{~ end ~}}

import '{{ project.dart.response_class | camel_case_to_snake_case }}.dart';
import '{{ project.dart.class_name | camel_case_to_snake_case }}_impl.dart';

abstract class {{ project.dart.class_name }} {
  factory {{ project.dart.class_name }}() {
    return _instance;
  }

  static final {{ project.dart.class_name }} _instance = {{ project.dart.class_name }}Impl(AuthService(), IOClient(HttpClient()), BuildConfig().baseUrl);

{{~ for cat in api.categories ~}}
  /// A collection of API methods related to {{ cat }}
  {{ cat }}Client {{ cat | to_camel_case }}() {
    throw UnimplementedError();
  }
{{~ end ~}}

  Future<{{ project.dart.response_class }}<T>> get<T>(String path, { Map<String, dynamic>? queryParameters, Map<String, String>? headers }) async {
    throw UnimplementedError();
  }

  Future<{{ project.dart.response_class }}<T>> delete<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    throw UnimplementedError();
  }

  Future<{{ project.dart.response_class }}<T>> put<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    throw UnimplementedError();
  }

  Future<{{ project.dart.response_class }}<T>> post<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    throw UnimplementedError();
  }

  Future<{{ project.dart.response_class }}<T>> postFiles<T>(String path, List<String> filePaths, { Map<String, String>? headers }) async {
    throw UnimplementedError();
  }
}
