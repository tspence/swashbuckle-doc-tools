import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:brotli/brotli.dart';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart';

import '../client/AuthService.dart';
import '../flavours/BuildConfig.dart';

{{~ for cat in api.categories ~}}
import './clients/{{ cat | camel_case_to_snake_case }}_client.dart';
{{~ end ~}}

import 'astro_error.dart';
import '{{ project.dart.response_class | camel_case_to_snake_case }}.dart';
import '{{ project.dart.class_name | camel_case_to_snake_case }}.dart';

class {{ project.dart.class_name }}Impl implements {{ project.dart.class_name }} {
  {{ project.dart.class_name }}Impl(this.authService, this._client, this.apiUrl);

  final BaseClient _client;
  final String apiUrl;
  final AuthService authService;
{{~ for cat in api.categories ~}}

  {{ cat }}Client? _{{ cat | to_camel_case }}Client;
  @override
  {{ cat }}Client {{ cat | to_camel_case }}() {
    return _{{ cat | to_camel_case }}Client ??= {{ cat }}Client(this);
  }
{{~ end ~}}

  Response _logRequest(String action, String path, int startMillis, Response value) {
    if (!BuildConfig.isRelease) {
      debugPrint('$action $path took ${DateTime.now().millisecondsSinceEpoch - startMillis}ms');
    }

    return value;
  }

  {{ project.dart.response_class }}<T> _handleAPIError<T>(dynamic error) {
    debugPrint('API Error $error');

    if (error is TimeoutException) {
      return {{ project.dart.response_class }}<T>.fromError(AstroError(message: 'Request timed out'), 408);
    }

    if (error is SocketException) {
      return {{ project.dart.response_class }}<T>.fromError(AstroError(message: 'No connection'), 408);
    }

    return {{ project.dart.response_class }}<T>.fromError(AstroError(message: 'An error occurred'), 500);
  }

  //Shortcut for typing
  {{ project.dart.response_class }}<T> _handleAPISuccess<T>(Response raw) {
    Map<String, dynamic> json;
    if (raw.headers.containsKey('content-encoding') && raw.headers['content-encoding'] == 'br') {
      json = jsonDecode(utf8.decode(brotli.decode(raw.bodyBytes))) as Map<String, dynamic>;
    } else {
      json = jsonDecode(utf8.decode(raw.bodyBytes)) as Map<String, dynamic>;
    }

    T? data;
    dynamic error;
    var success = true;

    if (json.containsKey('success')) {
      success = json['success'] as bool;
    }

    if (json.containsKey('data')) {
      data =  json['data'] as T;
    }

    if (json.containsKey('error')) {
      error = AstroError.fromJson(json['error'] as Map<String, dynamic>);
      success = false;
    }

    if (!success) {
      return AstroResult<T>.fromError(error as AstroError, raw.statusCode);
    }

    return AstroResult<T>.fromSuccess(data, raw.statusCode);
  }

  Uri _buildFullUrl(String path, Map<String, dynamic>? queryParameters) {
    return Uri.https(apiUrl, path, queryParameters);
  }

  Future<Map<String, String>> _buildHeaders(Map<String, String>? headers) async {
    final result = headers ?? {};

    result['Content-Type'] = 'application/json';
    result['Content-Encoding'] = 'br';

    if (authService.isValidCredential) {
      if (authService.credentials.isAccessTokenExpired()) {
        await authService.resetAccessToken();
      }
      result['Authorization'] = 'Bearer ${authService.credentials.accessToken}';
    }

    return result;
  }

  @override
  Future<{{ project.dart.response_class }}<T>> get<T>(String path, { Map<String, dynamic>? queryParameters, Map<String, String>? headers }) async {
    final startMillis = DateTime.now().millisecondsSinceEpoch;
    return _client
      .get(_buildFullUrl(path, queryParameters), headers: await _buildHeaders(headers))
      .then((Response value) => _logRequest('GET', path, startMillis, value))
      .then(_handleAPISuccess<T>)
      .catchError(_handleAPIError<T>);
  }

  @override
  Future<{{ project.dart.response_class }}<T>> delete<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    final startMillis = DateTime.now().millisecondsSinceEpoch;
    return _client
        .delete(_buildFullUrl(path, queryParameters), headers: headers, body: data)
        .then((value) => _logRequest('DELETE', path, startMillis, value))
        .then(_handleAPISuccess<T>)
        .catchError(_handleAPIError<T>);
  }

  @override
  Future<{{ project.dart.response_class }}<T>> put<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    final startMillis = DateTime.now().millisecondsSinceEpoch;
    return _client
        .put(_buildFullUrl(path, queryParameters), headers: headers, body: data)
        .then((value) => _logRequest('PUT', path, startMillis, value))
        .then(_handleAPISuccess<T>)
        .catchError(_handleAPIError<T>);
  }

  @override
  Future<{{ project.dart.response_class }}<T>> post<T>(String path, { Map<String, dynamic>? queryParameters, String? data, Map<String, String>? headers }) async {
    final startMillis = DateTime.now().millisecondsSinceEpoch;
    return _client
        .post(_buildFullUrl(path, queryParameters), headers: headers, body: data)
        .then((value) => _logRequest('POST', path, startMillis, value))
        .then(_handleAPISuccess<T>)
        .catchError(_handleAPIError<T>);
  }

  @override
  Future<{{ project.dart.response_class }}<T>> postFiles<T>(String path, List<String> filePaths, { Map<String, String>? headers }) async {
    final startMillis = DateTime.now().millisecondsSinceEpoch;
    final files = <MultipartFile>[];

    for (final filePath in filePaths) {
      files.add(await MultipartFile.fromPath('file', filePath));
    }

    final request = MultipartRequest('POST', _buildFullUrl(path, null));
    request.headers.addAll(await _buildHeaders(headers));
    request.files.addAll(files);

    final streamedResponse = await _client.send(request);
    return Response.fromStream(streamedResponse)
        .then((value) => _logRequest('SEND', path, startMillis, value))
        .then(_handleAPISuccess<T>)
        .catchError(_handleAPIError<T>);
  }
}
