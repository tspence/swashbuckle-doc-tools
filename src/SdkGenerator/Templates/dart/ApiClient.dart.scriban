import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_toolkit/http/APIClient.dart';
import 'package:http/http.dart' as http;
import 'package:brotli/brotli.dart';

{{~ for cat in api.categories ~}}
import 'clients/{{ cat }}Client.dart';
{{~ end ~}}
import '{{ project.dart.response_class }}.dart';
import 'AstroError.dart';
import '../flavours/BuildConfig.dart';
import '../client/AuthService.dart';
import '{{ project.dart.class_name }}.dart';


class {{ project.dart.class_name }}Impl implements {{ project.dart.class_name }} {
  BuildConfig config;

  Map<String, String>? headers;

  AuthService authService;
  APIClient api;

  {{ project.dart.class_name }}Impl(this.authService, this.api, this.config);
  
{{~ for cat in api.categories ~}}

  {{ cat }}Client? _{{ cat | to_camel_case }}Client;

  @override
  {{ cat | to_camel_case }}() {
    return _{{ cat | to_camel_case }}Client ??= {{ cat }}Client(this);
  }
{{~ end ~}}

  ClientResponse _logRequest(
      String action, String path, int startMillis, value) {
    if (!BuildConfig.isRelease) {
      debugPrint(
          "$action $path took ${DateTime.now().millisecondsSinceEpoch - startMillis}ms");
    }
    //Todo other stuff
    return value;
  }

  {{ project.dart.response_class }}<dynamic> _handleAPIError(error) {
    debugPrint("API Error $error");

    if (error is TimeoutException) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "Request timed out";
      result.statusCode = 408;
      return result;
    }

    if (error is SocketException) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "No connection";
      result.statusCode = 408;
      return result;
    }

    var result = {{ project.dart.response_class }}<dynamic>();
    result.error = AstroError();
    result.error!.message = "An error occurred";
    result.statusCode = 500;
    return result;
  }

  //Shortcut for typing
  {{ project.dart.response_class }}<dynamic> _handleAPISuccess(raw) {
    Map<String, dynamic>? json;
    if (raw.headers.containsKey("content-encoding") && raw.headers["content-encoding"] == "br") {
      json = jsonDecode(utf8.decode(brotli.decode(raw.bodyBytes)));
    } else {
      json = raw.json;
    }
    var result = {{ project.dart.response_class }}<dynamic>();
    if (json != null) {
      result.success = json["success"];    
      if (json.containsKey("data")) {
        result.data =  json["data"];
      }
    }
    result.statusCode = raw.statusCode;
    result.success = true;
    return result;
  }

  @override
  Future<{{ project.dart.response_class }}<dynamic>> get(String path,
      [Map<String, dynamic>? params, Map<String, String>? headers]) async {
    if (authService.isValidCredential) {
      headers = headers ?? {};
      headers['Authorization'] = 'Bearer ${authService.credentials.accessToken}';
    }

    int startMillis = DateTime.now().millisecondsSinceEpoch;
    return api
        .get(path, params: params, headers: headers, basePath: config.basePath)
        .then((value) => _logRequest("GET", path, startMillis, value))
        .then(_handleAPISuccess)
        .catchError(_handleAPIError);
  }

  @override
  Future<{{ project.dart.response_class }}<dynamic>> delete(String path,
      [Map<String, dynamic>? params, Map<String, String>? headers]) async {
    if (!authService.isValidCredential) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "Unauthorized";
      result.statusCode = 401;
      return result;
    }
    int startMillis = DateTime.now().millisecondsSinceEpoch;
    return api
        .delete(path, params: params, headers: headers, basePath: config.basePath)
        .then((value) => _logRequest("DELETE", path, startMillis, value))
        .then(_handleAPISuccess)
        .catchError(_handleAPIError);
  }

  @override
  Future<{{ project.dart.response_class }}<dynamic>> put(String path,
      [Map<String, dynamic>? params, Map<String, String>? headers]) async {
    if (!authService.isValidCredential) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "Unauthorized";
      result.statusCode = 401;
      return result;
    }

    int startMillis = DateTime.now().millisecondsSinceEpoch;
    return api
        .put(path, params: params, headers: headers, basePath: config.basePath)
        .then((value) => _logRequest("PUT", path, startMillis, value))
        .then(_handleAPISuccess)
        .catchError(_handleAPIError);
  }

  @override
  Future<{{ project.dart.response_class }}<dynamic>> post(String path,
      [Map<String, dynamic>? params,
      Map<String, String>? headers,
      bool ignoreAuth = false]) async {
    if (!authService.isValidCredential) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "Unauthorized";
      result.statusCode = 401;
      return result;
    }
    int startMillis = DateTime.now().millisecondsSinceEpoch;

    final apiCall = api
        .post(path, params: params, headers: headers, basePath: config.basePath)
        .then((value) => _logRequest("POST", path, startMillis, value))
        .then(_handleAPISuccess)
        .catchError(_handleAPIError);
    return apiCall;
  }

  @override
  Future<{{ project.dart.response_class }}<dynamic>> postFiles(String path, List<String> filePaths,
      [Map<String, String>? headers]) async {
    if (!authService.isValidCredential) {
      var result = {{ project.dart.response_class }}<dynamic>();
      result.error = AstroError();
      result.error!.message = "Unauthorized";
      result.statusCode = 401;
      return result;
    }

    int startMillis = DateTime.now().millisecondsSinceEpoch;
    List<http.MultipartFile> files = [];
    for (var filePath in filePaths) {
      files.add(await http.MultipartFile.fromPath('file', filePath));
    }
    return api
        .postFiles(path, files, headers:headers)
        .then((value) => _logRequest("SEND", path, startMillis, value))
        .then(_handleAPISuccess)
        .catchError(_handleAPIError);
  }
}
